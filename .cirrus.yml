task:
  name: Linux gcc 5/6/7/8 builds
  env:
    CIRRUS_CLONE_DEPTH: 1
  container:
    matrix:
      image: gcc:5
      image: gcc:6
      image: gcc:7
      image: gcc:8
    cpu: 2
    memory: 1G
  build_script: make clean && make -j3
  install_script: make install && make clean
  ## now try the built+installed sjasmplus with some tests and examples
  # this is not separate task, because that would need again build
  # of sjasmplus in new container instance, so just do everything in one task
  assemble_tests_script: ContinuousIntegration/test_folder_tests.sh
  assemble_examples_script: ContinuousIntegration/test_folder_examples.sh

pipe:
  name: coveralls.io coverage report (linux gcc6)
  # check if this is z00m's repository (the encrypted token belongs to original repo)
  only_if: $CIRRUS_REPO_OWNER == 'z00m128'
  #depends_on: makefile_build  ## saves some resources in case regular build fails, but that's rare
  env:
    # needs full clone to calculate revision number from git
    CIRRUS_CLONE_DEPTH: 0
    # coveralls plugin variables (access token + job ID)
    COVERALLS_REPO_TOKEN: ENCRYPTED[8b09887e95ef3aec93b9e31cbbca1f9090704ec9af432869c94d8d79dabdc95640bc061bbaaaf063e31dde112aa93729]
    CI_SERVICE_NAME: 'cirrus-ci'
    # makefile variables affecting build options
    DEBUG: 1
    COVERALLS_SERVICE: 1
  resources:
    cpu: 2
    memory: 1G
  steps:
    - image: gcc:7
      # git-clone also submodule for UnitTest++ sources
      submodules_script:
        - git submodule init
        - git submodule update
      generate_gcov_script: make clean && make -j3 coverage
    - image: python:3.7
      # installing my patched version of "cpp-coveralls" to get support for CI_SERVICE_NAME and git-revision number
      install_coveralls_plugin_script: pip install git+https://github.com/ped7g/cpp-coveralls.git@master
      # "-n" as the *.gcov files are already generated in the project root from previous step
      upload_gcov_data_script: cpp-coveralls -n -e lua5.1/ -e tolua++/ -e unittest-cpp/ -e cpp-src-tests/

task:
  name: windows mingw32 build
  env:
    CIRRUS_CLONE_DEPTH: 1
  windows_container:
    image: cirrusci/windowsservercore:cmake
    os_version: 2019
    cpu: 2
  build_script: ContinuousIntegration\winbuild_mingw32.bat
  sjasmplus_exe_existence_script: c:\tools\sjasmplus\sjasmplus --help
  assemble_examples_script: ContinuousIntegration\winbuild_mingw32_examples.bat
  assemble_tests_script: ContinuousIntegration\winbuild_mingw32_tests.bat

task:
  name: windows Visual Studio 15 2017 build
  env:
    CIRRUS_CLONE_DEPTH: 1
  windows_container:
    image: cirrusci/windowsservercore:cmake
    os_version: 2019
    cpu: 2
  build_script: ContinuousIntegration\winbuild_vs15_2017.bat
  # exe is installed at the same location as the MinGW build does
  sjasmplus_exe_existence_script: c:\tools\sjasmplus\sjasmplus --help
  assemble_examples_script: ContinuousIntegration\winbuild_mingw32_examples.bat
  assemble_tests_script: ContinuousIntegration\winbuild_mingw32_tests.bat

task:
  name: FreeBSD clang build (with unit tests)
  env:
    CIRRUS_CLONE_DEPTH: 1
  freebsd_instance:
    image_family: freebsd-13-0-snap
    cpu: 2
    memory: 3G
  ## lock pkg on current version (sjasmplus does not care as long as it can install ...)
  ##pkg lock -y pkg &&
  ## - locking disabled after second incident recommending "Consider running 'pkg update -f'"
  # install git (lite), GNU make and bash
  # (FreeBSD make can't handle current Makefile, git is needed for UnitTest++ submodule)
  sw_install_script: IGNORE_OSVERSION=yes pkg update -f && pkg install -y git-lite gmake bash diffutils
  sw_versions2_script:
    - git --version || echo "no git"
    - bash --version || echo "no bash"
    - gmake --version || echo "no gmake"
    - cc --version || echo "no cc"
    - c++ --version || echo "no c++"
  submodules_script:
    - git submodule init
    - git submodule update
  # regular binary build (will be not run, just testing the build process)
  build_script: gmake clean && gmake -j4 CC=cc CXX=c++
  # build+test the unit test binary
  test_script: gmake clean && gmake -j4 CC=cc CXX=c++ tests

task:
  name: MacOS default CC build (with unit tests)
  env:
    CIRRUS_CLONE_DEPTH: 1
  osx_instance:
    image: catalina-base
  #sw_versions2_script:
    #- git --version || echo "no git"
    #- bash --version || echo "no bash"
    #- make --version || echo "no make"
    #- cc --version || echo "no cc"
    #- c++ --version || echo "no c++"
  submodules_script:
    - git submodule init
    - git submodule update
  build_script:
    - date
    - make clean && make -j4 CC=cc CXX=c++
  test_script: make clean && make -j4 CC=cc CXX=c++ tests
